#先序遍历算法
void PreOrder(BiTree bt){
  if(bt!=NULL){//如果为空则结束
    visit(bt->data);//访问根节点
    PreOrder(bt->lchild);//先序遍历左子树
    PreOrder(bt->rchild);//先序遍历右子树
    }
}

#中序遍历算法
void InOrder(BiTree bt){
  if(bt!=NULL){//如果为空则结束
    InOrder(bt->lchild);中序遍历左子树
    visit(bt->data);//访问根节点
    InOrder(bt->rchild);//中序遍历右子树
  }  
}

#后序遍历算法
void LaOrder(BiTree bt){
  if(bt!=NULL){//如果为空则结束
    LaOrder(bt->lchild);//后序遍历左子树
    LaOrder(bt->rchild);//后序遍历右子树
    visit(bt->data);//访问根节点
  }
}

#二叉树的层次遍历(从上到下，从左到右依次遍历，利用队列先进先出)
void LevelOrder(BiTree bt){
    BiTreeNode Queue[MAXNODE];//定义队列
    int front,rear;
    if(bt==NULL)return;//空二叉树遍历结束
      front=-1;rear=0;
      Queue[rear]=bt;//根节点入队列
      while(rear!=front){//层级遍历!!!!
      front++;//出队
      visit(Queue[front]->data);//访问刚出队列的元素
          if(Queue[front]->lchild!=NULL){//如果有左孩子，左孩子入队
              rear++;
              Queue[rear]=Queue[front]->lchild;}
          if(Queue[front]->rchild!=NULL){//如果有右孩子，右孩子入队
              rear++;
              Queue[rear]=Queue[front]->rchild;}
      }
}

#中序遍历算法实现二叉树的构建(没看懂)
void PreInOrd(char preord[],char inord[],int i,int j,int k,int h,BiTree *t){
  int m;
  (*t)=new BiNode;
  (*t)->data=preord[i];//二叉树的根
  m=k;
  while(inord[m]!=preord[i])m++;//在中序序列中定位树根
  if(m==k)(*t)->lchild=NULL;//递归调用建立左子树，左子树为空
  else PreInOrd(preord , inord ,i+1,i+m-k,k,m-1,&((*t)->lchild));
  if(m==h)(*t)->child=NULL;//递归调用右子树，右子树为空
  else PreInOrd(preord,inord,i+m-k+1,j,m+1,h,&((*t)->lchild)));
}
