hello
数据结构学习

1：自定义线性表（顺序存储结构）
#define LIST_INIT_SIZE 100
#define LIST_INCREMENT 10

typedef int ElemType;

typedef struct SqList
{
ElemType *elem;
int length;
int list_size;
}SqList, *Ptr;
typedef Ptr sqlListpPtr;

2:初始化-创建线性表
Status :List_init(SqListPtr L)
{
status s= success;
L->List_size=LIST_INIT_SIZE;
L->length =0;
L->elem=(Elem Type *)malloc(sizeof(Elem type)*L->list_size);
if(L->elem == NULL)
s=fatal;
return s;
}

3:线性表查找（按位置查找值）
Status List_Retrival(SqListPtr L, int pos, ElemType *elem)
{
Status s = range_error;
if(L){
if((pos-1) >= 0 && (pos-1) < L->length){
*elem = L->elem[pos-1];
s = success;
}
}
else
s = fatal;
return s;
}

线性表查找（按值查找位置）
Status List_Locate(SqlistPtr L, ElemType elem, int *pos)
{
Status s = range_error;
if(L){
for(int i = 0;i < L->length; ++i){
if(l->elem[i]==elem){
*pos = i+1;
s = success;
break;
}
}
}
else s= fatal;
return s;
}

4:线性表的插入
Status List_Insert(SqlistPtr L,int pos, ElemType elem)
{
Status s =range_error;
if((pos-1) >= 0 && (pos-1) <= L->length){
if(L && L->length < L->list_size){
for(int i = L->length-1; i >= pos-1;--i){
L->elem[i+1] =L->elem[i];
}
L->elem[pos-1]= elem;
L->length++;
s = success;
}
}
else s fail;
return s;
}

5：线性表的删除
Status List_delete(SqlistPtr L,int pos)
{
Status s = range_error;
if((pos)-1 >= 0 && (pos-1) < l->length){
if(L && L->length > 0){
for(int i = pos; i < L-> length; ++i){
L->elem[i-1]=L->elem[i];
s= success;
}
}
}
else s = fall;
Return s;
}

线性表的链式存储（单链表）
1：定义两个结点 并将其串成单链表
Typedef struct Node
{
ElemType elem;
Struct Node *next;
}Node,*Ptr;
Typedef Ptr *SqlistPtr;
Node n1,n2;
Ptr p=&n1;
n1.next=&n2;
Ptr L =p;
N2.next=NULL;

2:单链表的位置查找
Status List_Retrieve(SqlistPtr L, int pos, ElemType *elem)
{
Status s = range_error;
Ptr p =(*L)->next;
int i = 1;
while(p && I < pos){
{
i++;
p=p->next;
}
if(p && I==pos)
{
*elem = p->data;
s= success;
}
}
return s;
}

3: 单链表的按值查找
Status List_Locate(SqlistPtr L, ElemType elem,int *pos)
{
Status s = range_error;
Ptr p =(*L)->next;
int i = 1;
while(p != NULL){
if(p->elem ==elem)break;
i++;
p=p->next;
}
if(p){
*pos = I;
S = success;
}
return s;
}

4:单链表的插入操作
Status LIst_Insert(SqlistPtr L, int pos ,ElemTYpe elem)
{
Status status;
Ptr p,s;
Status = List_Retrival(L, pos-1,&p);
if( status == success){
s=(LinkedPtr)malloc(sizeof(Node));
if(s){
S->elem = elem;
S->next = p->next;
p->next =s;
status = success;}
Else status = fatal;
}
Else status = range_error;
Return status;
}

5:单链表的删除
Status List_delete(SqlistPtr L, int pos)
{
Status status=fail;
Ptr s,p;
Status = List_Retrival(L,pos -1,&p);
if(status== success)
{
s=p->next;
P->next= s->next;
free(s);
s= NULL;
Status = success;
}
Return status;
}

6:建立单链表(创建一个空的单链表，一次建立各元素结点，并逐个插入链表)
Status List_create(SqlistPtr L, elemtype data[], int len){
Status s;
Ptr p;
s = List_init(L);
if(s == success){
for(int i = len-1;i>=0;--i){
p=(Ptr)malloc(sizeof(Node));
if(p){
p->elem = data[i];
p->next=(*L)->next;
(*L)->next = p;
}
else{s=fail;break;}
}
}
return s;
}

7:单链表的变形
循环单链表（最后一个结点的直接后继是空还是头结点）
带尾指针的循环单链表（
1：两个循环单链表的合并
p=La->next; //保存La的头结点指针
La->next= Lb->next->next //头尾连接
free(Lb->next); //释放第二个表的头结点
Lb->next=p; //组成循环链表
2：最后一个元素后||第一个元素加新元素
）
双向链表（elem前后各有一个指针 来这样进行连接）
（双向链表的插入操作
S->next = p->next;
p->next=s;
S->next->prior =s;
S->prior =p;
双向链表的删除操作
P->next=p->next->next;
P->next->prior = p;）
静态链表（数据元素的存储空间像顺序表一样是事先静态分配的 数据元素之间的关系是像链表一样显示的）
8：线性表的合并
Status List_Union(ListPtr La,ListPtr Lb)
{
Elem Type elem;
Status status;
int i,j,len = List_Size(Lb);
for(i=0;i<len;i++)
{
LIst_Retrieve(Lb,i,&elem);
status = List_Locate(La,elem,&j);
if(status!=success)
{
status = List_insert(La,1,elem);
if(status!=success)
break;
}
}
return status;
}

9：顺序表实现合并
Status List_Union(ListPtr ListPtr Lb)
{
Status status = success;
for(int i=1;i<=Lb->length;i++)
{
for(int j=1;j<=La->length;j++)
if(Lb->elem[i]==La->elem[j])break;
if(La->length<MAXSIZE)
{
if(j>La->length)
{
La->length++;
La->elem[length] = Lb->elem[i];
}
}
else{status=fail;break;}
}
return status;
}

10：有序表的合并
Status List_Merge(SqListPtr La,SqListPtr Lb,SqlistPtr Lc)
{
ElemType elem1,elem2;status=List_init(Lc);
int i=1,j=1,k=1;
int n=List_siza(La),m=List_init(Lb);
while(i<=n&&j<=m)
{
List_Retrieve(La,i,&elem1);
List_Retrieve(Lb,j,&elem2);
if(elem1<elem2){status = List_Insert(Lc,k,elem1);i=i+1;}
else{status = List_Insert(Lc,k,elem2);j=j+1;}
k=k+1;
}
while(i<=n)
{
List_Retrieve(La,i,&elem1);
status = List_Insert(Lc,k,elem1);
i=i+1;
k=k+1;
}
while (j<=m)
{
List_Retrieve(Lb,j,&elem2);
status = List_Insert(Lc,k,elem2);
j=j+1;
k=k+1;
}
return status;
}

11：归并两个有序表|链式存储(破坏的方法)
void merge_linklist(ListPtr *la,ListPtr *lb,ListPtr *lc)
{
LIstPtr pa,pb,pc,tp;
pa=(*la)->next;
pb=(*lb)->next;
pc=*la;
while(!pa&&!pb)
{
if(pa->datadata)
{
pc->next=pa;pc=pa;pa=pa->next;
}
else if(pa->data>pb->data)
{
pc->next=pb;pc=pb;pb=pb->next;
}
else{
pc->next=pa;
pc=pa;
pa=pa->next;
tp=pb;
pb=pb->next;
free(tp);
tp=NULL;
}
pc->next=(pa:pb);
ferr(lb);
lc=la;
}
}mer-linklist

栈和队列：限定插入和删除只能在表的“端点”进行的线性表。
栈：先进后出 后进先出 队列：先进先出
类型定义：
typedef struct stack{
int top;//就是线性表顺序存储结构的length
StackEntry *elem;//动态分配空间大小为stack_size
int stack_size;
}Stack,*StackPtr;
域elem[0,.....,stack_size]用于存放数据元素；
我们约定top=-1来表示空栈
当top=stack_size-1来表示栈y已经满了
顺序栈的大小是一开始就定义好的 所以会有溢出现象

基本操作：
顺序栈入栈
Status Stack_push(StackPtr s,StackEntry item){
Status outcome = success;
if(Stack_Full(s))/if(s->top==MAXSTACK-1)/
outcome = overflow;/栈满则上溢/
else{
s->top++;
s->entry[s->top]=item;/数据元素放入top位置/
}
return outcome;
}

顺序栈出栈
Status Stack_Pop(StackPtr s,StackEntry *item){
Status outcome = success;
if(Stack_Empty(s))
outcome = underflow;//栈空则下溢
else
*item = s->entry[s->top--];//将top所指数据元素放入item，top再减一
return outcome;
}

去栈顶元素
Status Stack_Top(StackPtr s,StackEntry *item){
Status outcome = success;
if(Stack_Empty(s))
outcome = underflow;//栈空则下溢出
else
*item = s->entry[s->top];//取出数据，top指针不变
return outcome;
}

栈的链式存储
采用单链表的结点结构 将单链表的首端作为栈顶
类型定义
typedef struct node{
StackEntry entry;
struct node * next;
}StackNode,*StackNodePtr;
typedef struct stack{//链栈的类型定义
StackNodePtr top;//指向栈顶的指针
}Stack,*StackPtr;
空栈时top=NULL;

链栈入栈操作
Status Stack_Push(StackPtr s,StackEntry item){
Statsu outcome = success;
StackNodePtr np= MakeNode(item);//申请结点空间，并装填结点域
if(n= == NULL)
outcome = overflow;//无法分配存储空间，相当于栈满上溢
else{
np->next = s->next;//所申请到的结点插入在表头
s->top = np;
}
return outcome;
}

链栈的出栈操作
Status Stack_Pop(StackPtr s,StackEntry *item){
Status outcome = success;
if(Stack_Empty(s))
outcome = underflow;//栈空则下溢
else{
StackNodePtr np=s->top;//删除栈顶元素
s->top = np->next;
*item = np->entry;
free(np);
}
return outcome;
}

链栈去栈顶元素操作的实现
Status Stack_Top(StackPtr s,StackEntry *item)
{
Status outcome = success;
if(Stack_Empty(s))
outcome = underflow;//栈空则下溢
else
*item = s->top->entry;
return outcome;

}
栈的特点与简单应用
出栈顺序（完全相同 完全相反都是可能的 也有可能先单个入 有的是多个入）

队列：队列是限定只能在表的一端进行插入，在表的另一端进行删除的线性表
队尾（rear）——允许插入的一端
队头（front）———允许删除的一端
特点：先进先出

队列的顺序存储
类型定义
#define MAXQUEUE 10
typedef struct queue
{
int front,rear;//队头和队尾指针，指示队头和队尾数据元素的位置
QueueEntry entry[MAXQUEUE];//数据元素存储空间
}Queue,*QueuePtr;//定义新的数据类型

假溢出就看做循环数组 用%

循环顺序队列-判断空还是满
1：用一个计数变量来记载队列中的元素个数
。初始化队列c=0
。入队时 c++
。出队时 c--
当计数变量c=MAXSIZE时 队满
当c=0时 队空
2：设一个标志位来区别队列是空还是满（重点是循环）
初始化队列时：sq->front =sq->rear，标志位为false
入队后 使sq-> front = sq->rear 置标志位为true
出队后 使标志位为false
当sq->front = sq->rear 且标志位为true时 队满
当sq->front=sq->rear 且标志位为false时 队空
其他为非空非满
3:牺牲一个元素空间，来区别队空队满（优先使用第三种方案）
入队前 先判sq->rear+1 是否等于sq->front 若是则为队满
而当sq->front == sq->rear时 为队空（把front不输入值）

队列的:链式存储结构(头删除 尾插入)
类型定义
typedef struct node{//链式队列的结点结构
QueueEntry Entry;//队列的数据元素类型
struct node *next;//指向后继结点的指针
}QueueNode,&QueueNodePtr;
typedef struct queue{//链式队列
QueueNode *front;//对头指针
QueueNode *rear;//队尾指针
}Queue,*QueuePtr;

//一个元素的插入(多个可以依次类推）
初始化（头结点）
Q->front->next=NULL;
Q->rear->next=NULL;
x结点（入队）
px=new Qnode;
px->data=x;
px->next=NULL;
Q->rear->next = px;(原来的尾部是空的 现在指向了新的结点)
Q->rear = px;（新的结点又变成了整个队列的尾部）

//出队操作
px=Q->front->next;(确定出队的结点)
Q->front->next=Q->front->next->next;(使删除前面的哪个指针越过要被删除的结点 指到它后面的结点上)
free(px);//释放该结点

//队列的应用：
银行排队模拟系统，得到顾客平均排队时间
1：为什么用模拟系统
2：模拟系统的主要操作
3：算法实现
4：假如有不同的优先级（普通顾客，VIP客户），采用什么样的存储结构更为合适
